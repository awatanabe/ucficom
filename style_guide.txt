STYLE GUIDE FOR FICOM WEB PORTAL

/*
 * Basic conventions
 */

// Constructor Classes
- Load helpers, then libraries, then models. Each should be in alphabetical order.
- Do not load view classes (table, table_form, html). This is done through Display library

// Quotes
-  PHP code should use double quotes ("") and all HTML should use single quotes ('').

// Messages
- Liberal use of messages is OK
- Default message styling is MESSAGE_NORMAL we should be used for basic notices.
- MESSAGE_SUCCESS should be used when information in the database is updated.
- MESSAGE_ALERT should be used when there is an error.

/***************************************************************************************************
 * Databases
 **************************************************************************************************/

/** Introduction **/
- The databases are used for storing all information in the system.
- Only the lead developer, or someone acting with the lead developer's permission, should access or
change the database or database layout directly.

// Definitions
    For this database, information is conceptually stored as a "record." A record is a container
that at a minimum contains an "entry" that has metadata about the record. The record may also 
have "elements" that contain information related to the metadata. Both entries and elements may have
connections to certain types. In some cases, such as tables of system users, the metadata in the
entry is the entirety of the record; in other cases such as grant records, the elements are the main 
data. In other cases, elements are extra metadata that does not fit in the regularized entry. 
Records are organized by type into "models" - i.e. there is a model for users, for grants, etc.
    This very abstract discussion of information storage is important to understanding the design
of the database and the models used to access their data. The database has three types of tables:
- Primary Tables: Contain entries with metadata for records of a model. The metadata contain
information like names, email addresses, and other information describing the record. Each model 
has only one primary table.
- Secondary Tables: Contain elements. Each secondary table contains a particular type of 
information, such as notes related to a record. Elements in secondary tables are accessed only in
reference to their primary table. A model may have multiple secondary tables; however, each record
in the model may not access information in each secondary table. For this reason, these tables are
also called dependent tables.
- Reference Tables: These provide information for categorizing entries and elements. Where as
entries to elements have a one to many relationship, entries to references have a many to one 
relationship.

// Primary Tables
- Store metadata for different types of records. This is information to identify the record - name,
email, etc.
- A row in a primary table is an entry; There is a one to one relationship between entries and
records.
- Primary tables have several required features (this is for abstraction and model re-usability):
|- Name is a one word plural (i.e. users, groups, etc.)
|- Primary key column. Must be numeric. Has name "{singular_table_name}_id"
|- A status column. Must be numeric. The value zero (0) is defined to mean INACTIVE. By default,
    this column is "type_code."
|- If the record type deals with objects, there must be a "name" column. This contains a human 
    readable name. Records dealing with people can have "first_name" and "last_name."
- Entries in primary tables are never deleted. They can be deactivated by setting the status column
to zero.
- Linking columns to entries in other primary tables should have the name of the primary key column
in the other table and have foreign keys set to RESTRICT on DELETE and CASCADE on update. These
columns should be nullable.
- Linking columns to reference tables should be titled the same as the primary key of the reference
table and have a foreign key on that column set to RESTRICT on DELETE and CASCADE on update.

// Secondary Tables
- These store additional information associated with each record. This information is often 
irregular; not every record will have elements in secondary tables.
- Secondary tables have several required features:
|- Primary key column. Must be numeric and is suffixed by "_id."
|- Foreign key column for each primary table that this table is secondary to. This should be the
    name of the primary key column of that primary table.
| -A status column linked to a reference table that can be set to zero in the case of deactivation.
- Foreign key columns should have foreign keys set to CASCADE for DELETE and UPDATE on the foreign
column.
- Name should be prefixed by the name of the table they are dependent on. Table names should be 
plural.

// Reference Tables
- Should have a numeric primary key columns suffixed by "_code."
- In general, these tables have two columns: the primary key column and a human value column. The
human value column should have the singular name of the table (i.e. "type" for table "types).
- For reference tables defining the status column of a primary table, there should be an entry with
the primary key zero (0) and the human value "Inactive."
- Reference table names should be prefixed by the name of the table that references them. Table
names should be plural.

/** Database Structure **/
-P sessions {Aggregate grant informaiton for each UC session}
|-R sessions_types {Type codes for sessions - necessary for inactivity}
-P grantspacks {Aggregate information for each meeting's grants pack}
|-R grantspacks_statuses {Status code for grantspacks}
|-R grantspacks_types {Type codes for grantspacks - i.e. regular, wintersession, etc.}
-P grants {Aggregate information for each grant applicaiton}
|-R grants_statuses {Status codes for grants marking what point they are at in the process}
|-R grants_types {Type codes for grants - i.e. upfront, retroactive, etc.}
|-S grants_items {Line item expenses and revenues for grants}
 |-R grants_items_types {Type codes for line items - i.e. expense vs. revenue}
 |-R grants_items_categories {FiCom assigned categories for line items}
-P groups {Contact and descriptive informaiton for groups}
|-R groups_types {Type codes for groups - i.e recognized, club sport, etc.}
|-S groups_altnames {Potential alternate names for groups to keep track of}
|-S groups_notes {Notes on groups to have}
 |-R groups_notes_types {Type codes for group notes}
|-S groups_positions {Pivot table linking contacts to groups and the position the contact holds}
 |-R groups_positions_types {Type codes for positions - i.e. primary contact}
-P users {Data for system users}

/** Dependencies - Table of Foreign Keys **/
- This table shows the foreign key relationships in the database.

    CHILD                       NULL    PARENT                              FK DELETE   FK UPDATE
    grantspacks.session_id      NULL    sessions.sessions_id                RESTRICT    CASCADE     
    grantspacks.status_code             grantspacks_statuses.status_code    RESTRICT    CASCADE   
    grantspacks.type_code               grantspacks_types.type_code         RESTRICT    CASCADE     
    grants.grantspack_id        NULL    grantspacks.granspack_id            SET NULL    CASCADE    
    grants.contact_id           NULL    contacts.contact_id                 SET NULL    CASCADE     
    grants.group_id             NULL    groups.group_id                     RESTRICT    CASCADE            
    grants.status_code                  grants_statuses.status_code         RESTRICT    CASCADE     
    grants.type_code                    grants_types.type_code              RESTRICT    CASCADE
    grants_items.grant_id               grants.grant_id                     CASCADE     CASCADE
    grants_items.type_code              grants_items_types.type_code        RESTRICT    CASCADE
    groups.type_code                    groups_types.type_code              RESTRICT    CASCADE
    groups_altnames.group_id            groups.group_id                     CASCADE     CASCADE
    groups_altnames.type_code           groups_altnames_types.type_code     RESTRICT    CASCADE
    groups_notes.group_id               groups.group_id                     CASCADE     CASCADE
    groups_notes.type_code              groups_notes_types.code             RESTRICT    CASCADE
    groups_positions.group_id           groups.group_id                     CASCADE     CASCADE
    groups_positions.contact_id         contacts.contact_id                 CASCADE     CASCADE
    groups_positions.type_code          groups_positions_types.type_code    RESTRICT    CASCADE
    contacts_altemails.contact_id       contacts.contact_id                 CASCADE     CASCADE 
    contacts_altemails.type_code        contacts_altemails_types.type_code  RESTRICT    CASCADE
    
- Columns that are marked null should be set to null if the parent is deleted; however, this should
    be done manually, hence the RESTRICT to force the user to update those.

/***************************************************************************************************
 * Models
 **************************************************************************************************/

/ ** Basic Information **/
- Models are the code abstraction for accessing database.
- DATABASES SHOULD ONLY BE ACCESSED THROUGH MODELS. Other access methods are verboten!
- All models should extend UC_Model rather CI_Model. The UC_Model contains a number of basic 
methods that work off the structure of the tables.
- Each primary table should have one model. The model should have the same name as the primary
table.
- Only the primary table's given model should access that primary table and associated reference
tables.
- Secondary tables should be only accessed by tables which link to that model's primary table
through a foreign key (in practice, this only applies to groups_positions).

/** UC MODEL **/
- This model contains common methods to perform on the database. 
- Only the lead developer or someone with explict permission should directly alter the UC_Model file

// Constructor
- All children of the UC_Model must have a constructor function. 
- The constructor must call the parent constructor as its first action to give the object access
to UC_Model (and thus CI_Model) functionality.
- The constructor must also call the initialize method ($this->initialize()). This is because the 
CodeIgniter system will not accept either abstract methods/properties or parameters for the 
__construct() method - normally, these would be this used to initialize the model. 

// Prep References
- If the primary table refers to references tables, these tables should be

// Constructor and Initializer methods
- All models should extend UC_MODEL, which provides some common functionality based on the database
design.
- Because CodeIgniter does not allow UC_MODEL to be abstract or accept parameters in the 
constructor, there are some variation from standard OO practice to initialize the model
| - The "initialize()" method must be called in the __constructor() method to establish the table
name and other basic information
| - If the primary table uses reference or secondary tables, the join clauses from queries should
be implemented in the prep_reference/prep_secondary methods.

/***************************************************************************************************
 * Libraries
 **************************************************************************************************/

// General Notes
- Libraries are collections of functions that are designed to help you write code. They are supposed
to be portable and allow for code reuse. If you ever find yourself writing code twice, it should
go into a library.
- In general, libraries will be the purview of Aaron. If you have an idea for a library or want to
modify or expand an existing library. Unless you have express permission, please do not change or
add any libraries.

/** Authentication **/
// Basic Description
This library contains functions to keep track of user's login status. All actions to do with logging
users in should be done through this library, rather than through the service library or directly
through the sessions variable.

/** Service **/
// Basic Description
The Service library is an interface for using sessions data (persistent data related to an 
individual user). The philosophy is that because SESSIONS data is treated as an array, it is
potentially fraughtful to allow direct access to the data - if different keys are used to store
data, it could lead to duplicates and code bugs. The service library provides control over the use
of sessions.
- Because of the Service library, you should never need to use the CodeIgniter Sessions library. If
there is some piece of data you would like stored in sessions, contact Aaron and he can maybe add
it to the library.

/** Display **/
// Basic Description
This library services as the interface between controllers in views. It is meant to take the place
of the $this->load->view() with some standardized functions designed, among other things, to ensure
pages are loaded in the correct way. You should never load views directly but rather 
through the methods provided by this library unless previously discussed with Aaron.
- In general, all controller methods should end with a call to a display library function.


/***************************************************************************************************
 * Naming Conventions
 **************************************************************************************************/

/** Data Layer - Models and Databases **/
- See the respective Database and Model sections for naming conventions

/** Libraries **/
- Library names should be singular (i.e. "service" not "services")

/** HTML Page Elements **/

// Forms
- All submit buttons should have the name "submit"


/***************************************************************************************************
 * Styling Conventions
 **************************************************************************************************/

/** Basics **/
- Styling refers to element appearance. Element layout and positioning is consider layout.

/** CSS Files **/
- All styling and layout should be done using CSS files.
- All styling data should be in the styles.css file.  

/***************************************************************************************************
 * Layout Conventions
 **************************************************************************************************/

/** Page Layout **/
// Width
The body is set to be 940px wide. However, the canvas for actual views should be
only 920px wide to account for padding.

// Content
The minimum height of content <div> is 400px 

/** Headings **/
H1 - Use sparingly for major pages.
H2 - Define the major sections of the page. Should be default for page title.
H3 - Define the subsection of a given section.


/** General **/
- All direct output from users should be escaped using
- Output through set_value() and similar function for forms is automatically escaped.